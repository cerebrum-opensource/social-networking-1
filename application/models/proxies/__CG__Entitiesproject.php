<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class project extends \Entities\project implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getOccupation()
    {
        $this->__load();
        return parent::getOccupation();
    }

    public function setOccupation($occupation)
    {
        $this->__load();
        return parent::setOccupation($occupation);
    }

    public function getFrom_datee()
    {
        $this->__load();
        return parent::getFrom_datee();
    }

    public function setFrom_datee($from_datee)
    {
        $this->__load();
        return parent::setFrom_datee($from_datee);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setUrl($url)
    {
        $this->__load();
        return parent::setUrl($url);
    }

    public function getTeam_members()
    {
        $this->__load();
        return parent::getTeam_members();
    }

    public function setTeam_members($team_members)
    {
        $this->__load();
        return parent::setTeam_members($team_members);
    }

    public function getDescprition()
    {
        $this->__load();
        return parent::getDescprition();
    }

    public function setDescprition($descprition)
    {
        $this->__load();
        return parent::setDescprition($descprition);
    }

    public function getTo_datee()
    {
        $this->__load();
        return parent::getTo_datee();
    }

    public function setTo_datee($to_datee)
    {
        $this->__load();
        return parent::setTo_datee($to_datee);
    }

    public function getProjectsUser()
    {
        $this->__load();
        return parent::getProjectsUser();
    }

    public function setProjectsUser($projectsUser)
    {
        $this->__load();
        return parent::setProjectsUser($projectsUser);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'occupation', 'from_datee', 'url', 'team_members', 'descprition', 'to_datee', 'projectsUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}