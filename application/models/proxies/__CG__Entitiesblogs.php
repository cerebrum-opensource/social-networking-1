<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class blogs extends \Entities\blogs implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setUrl($url)
    {
        $this->__load();
        return parent::setUrl($url);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getBlog_data()
    {
        $this->__load();
        return parent::getBlog_data();
    }

    public function setBlog_data($blog_data)
    {
        $this->__load();
        return parent::setBlog_data($blog_data);
    }

    public function getLikeses()
    {
        $this->__load();
        return parent::getLikeses();
    }

    public function setLikeses($likeses)
    {
        $this->__load();
        return parent::setLikeses($likeses);
    }

    public function getShares()
    {
        $this->__load();
        return parent::getShares();
    }

    public function setShares($shares)
    {
        $this->__load();
        return parent::setShares($shares);
    }

    public function getCommentses()
    {
        $this->__load();
        return parent::getCommentses();
    }

    public function setCommentses($commentses)
    {
        $this->__load();
        return parent::setCommentses($commentses);
    }

    public function getIlook_user()
    {
        $this->__load();
        return parent::getIlook_user();
    }

    public function setIlook_user($ilook_user)
    {
        $this->__load();
        return parent::setIlook_user($ilook_user);
    }

    public function getBlog_categories()
    {
        $this->__load();
        return parent::getBlog_categories();
    }

    public function setBlog_categories($blog_categories)
    {
        $this->__load();
        return parent::setBlog_categories($blog_categories);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'url', 'title', 'blog_data', 'likeses', 'shares', 'commentses', 'ilook_user', 'blog_categories');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}