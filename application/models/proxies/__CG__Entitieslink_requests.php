<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class link_requests extends \Entities\link_requests implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getLink_request_type()
    {
        $this->__load();
        return parent::getLink_request_type();
    }

    public function setLink_request_type($link_request_type)
    {
        $this->__load();
        return parent::setLink_request_type($link_request_type);
    }

    public function getSender_msg()
    {
        $this->__load();
        return parent::getSender_msg();
    }

    public function setSender_msg($sender_msg)
    {
        $this->__load();
        return parent::setSender_msg($sender_msg);
    }

    public function getIs_confirmed()
    {
        $this->__load();
        return parent::getIs_confirmed();
    }

    public function setIs_confirmed($is_confirmed)
    {
        $this->__load();
        return parent::setIs_confirmed($is_confirmed);
    }

    public function getRequest_msg()
    {
        $this->__load();
        return parent::getRequest_msg();
    }

    public function setRequest_msg($request_msg)
    {
        $this->__load();
        return parent::setRequest_msg($request_msg);
    }

    public function getLink_requestsWall_post()
    {
        $this->__load();
        return parent::getLink_requestsWall_post();
    }

    public function setLink_requestsWall_post($link_requestsWall_post)
    {
        $this->__load();
        return parent::setLink_requestsWall_post($link_requestsWall_post);
    }

    public function getLink_requestsSenderUser()
    {
        $this->__load();
        return parent::getLink_requestsSenderUser();
    }

    public function setLink_requestsSenderUser($link_requestsSenderUser)
    {
        $this->__load();
        return parent::setLink_requestsSenderUser($link_requestsSenderUser);
    }

    public function getLink_requestsRecieverUser()
    {
        $this->__load();
        return parent::getLink_requestsRecieverUser();
    }

    public function setLink_requestsRecieverUser($link_requestsRecieverUser)
    {
        $this->__load();
        return parent::setLink_requestsRecieverUser($link_requestsRecieverUser);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'link_request_type', 'sender_msg', 'is_confirmed', 'request_msg', 'link_requestsWall_post', 'link_requestsSenderUser', 'link_requestsRecieverUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}