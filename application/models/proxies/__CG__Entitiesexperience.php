<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class experience extends \Entities\experience implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getJob_title()
    {
        $this->__load();
        return parent::getJob_title();
    }

    public function setJob_title($job_title)
    {
        $this->__load();
        return parent::setJob_title($job_title);
    }

    public function getLocation()
    {
        $this->__load();
        return parent::getLocation();
    }

    public function setLocation($location)
    {
        $this->__load();
        return parent::setLocation($location);
    }

    public function getCurrently_work()
    {
        $this->__load();
        return parent::getCurrently_work();
    }

    public function setCurrently_work($currently_work)
    {
        $this->__load();
        return parent::setCurrently_work($currently_work);
    }

    public function getJob_startdate()
    {
        $this->__load();
        return parent::getJob_startdate();
    }

    public function setJob_startdate($job_startdate)
    {
        $this->__load();
        return parent::setJob_startdate($job_startdate);
    }

    public function getJob_enddate()
    {
        $this->__load();
        return parent::getJob_enddate();
    }

    public function setJob_enddate($job_enddate)
    {
        $this->__load();
        return parent::setJob_enddate($job_enddate);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getSelf_employed()
    {
        $this->__load();
        return parent::getSelf_employed();
    }

    public function setSelf_employed($self_employed)
    {
        $this->__load();
        return parent::setSelf_employed($self_employed);
    }

    public function getExperiencesCompany()
    {
        $this->__load();
        return parent::getExperiencesCompany();
    }

    public function setExperiencesCompany($experiencesCompany)
    {
        $this->__load();
        return parent::setExperiencesCompany($experiencesCompany);
    }

    public function getExperiencesUser()
    {
        $this->__load();
        return parent::getExperiencesUser();
    }

    public function setExperiencesUser($experiencesUser)
    {
        $this->__load();
        return parent::setExperiencesUser($experiencesUser);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'job_title', 'location', 'currently_work', 'job_startdate', 'job_enddate', 'description', 'self_employed', 'experiencesCompany', 'experiencesUser');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}